{"version":3,"sources":["../src/string.ts","../src/number.ts","../src/array.ts","../src/object.ts","../src/index.ts"],"names":["validate","data","validator","result","string","msg","defaultValue","value","valid","values","min","max","length","pattern","number","array","items","object","props","keys","failedKeys","key","err","api","fluent"],"mappings":"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","file":"index.js","sourcesContent":["import { Context } from \"./types\";\n\nfunction validate (data: any, validator: () => { valid: boolean, error: string | null }) {\n  data.errors = data.errors || [];\n  data.valid = data.errors.length === 0;\n\n  const value = data.value as string;\n  if (typeof value !== \"string\") {\n    data.valid = false;\n    if (!data.errors.includes(\"invalid string\")) {\n      data.errors.push(\"invalid string\");\n    }\n    return data;\n  }\n\n  const result = validator();\n  if (!result.valid) {\n    data.valid = false;\n    data.errors.push(result.error);\n  }\n\n  return data;\n}\n\nexport const string = {\n  coerce(this: Context, data: any, msg: string = \"\") {\n    try {\n      data.value = data.value.toString();\n    } catch (e) {}\n\n    return validate(data, () => {\n      return { valid: true, error: null };\n    });\n  },\n  default(this: Context, data: any, defaultValue: string) {\n    if (data.value === undefined || data.value === null) {\n      data.value = defaultValue;\n    }\n\n    return validate(data, () => {\n      return { valid: true, error: null };\n    });\n  },\n  required(this: Context, data: any, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as string;\n      const valid = !!(value && value.length > 0);\n      return { valid, error: valid ? null : msg || \"string is required\" };\n    });\n  },\n  enum(this: Context, data: any, values: string[], msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as string;\n      const valid = values.includes(value);\n      return { valid, error: valid ? null : msg || \"invalid value\" };\n    });\n  },\n  min(this: Context, data: any, min: number, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as string;\n      const valid = !!(value && value.length >= min);\n      return { valid, error: valid ? null : msg || `too short - min length ${min}` };\n    });\n  },\n  max(this: Context, data: any, max: number, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as string;\n      const valid = !!(value && value.length <= max);\n      return { valid, error: valid ? null : msg || `too long - max length ${max}` };\n    });\n  },\n  length(this: Context, data: any, length: number, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as string;\n      const valid = !!(value && value.length === length);\n      return { valid, error: valid ? null : msg || `invalid length - length ${length}` };\n    });\n  },\n  match(this: Context, data: any, pattern: string, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as string;\n      const valid = new RegExp(pattern).test(value);\n      return { valid, error: valid ? null : msg || \"invalid pattern\" };\n    });\n  }\n}\n","import { Context } from \"./types\";\n\nfunction validate (data: any, validator: () => { valid: boolean, error: string | null }) {\n  data.errors = data.errors || [];\n  data.valid = data.errors.length === 0;\n\n  const value = data.value as number;\n  if (typeof value !== \"number\") {\n    data.valid = false;\n    if (!data.errors.includes(\"invalid number\")) {\n      data.errors.push(\"invalid number\");\n    }\n    return data;\n  }\n\n  const result = validator();\n  if (!result.valid) {\n    data.valid = false;\n    data.errors.push(result.error);\n  }\n\n  return data;\n}\n\nexport const number = {\n  coerce(this: Context, data: any, msg: string = \"\") {\n    try {\n      data.value = Number(data.value);\n    } catch (e) {}\n\n    return validate(data, () => {\n      return { valid: true, error: null };\n    });\n  },\n  default(this: Context, data: any, defaultValue: number) {\n    if (data.value === undefined || data.value === null) {\n      data.value = defaultValue;\n    }\n    \n    return validate(data, () => {\n      return { valid: true, error: null };\n    });\n  },\n  required(this: Context, data: any, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as number;\n      const valid = value !== undefined && value !== null;\n      return { valid, error: valid ? null : msg || \"number is required\" };\n    });\n  },\n  enum(this: Context, data: any, values: number[], msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as number;\n      const valid = values.includes(value);\n      return { valid, error: valid ? null : msg || \"invalid value\" };\n    });\n  },\n  min(this: Context, data: any, min: number, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as number;\n      const valid = value >= min;\n      return { valid, error: valid ? null : msg || `too small - min value ${min}` };\n    });\n  },\n  max(this: Context, data: any, max: number, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as number;\n      const valid = value <= max;\n      return { valid, error: valid ? null : msg || `too large - max value ${max}` };\n    });\n  },\n  integer(this: Context, data: any, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as number;\n      const valid = Number.isInteger(value);\n      return { valid, error: valid ? null : msg || \"invalid integer\" };\n    });\n  }\n}\n","import { Context } from \"./types\";\n\nfunction validate (data: any, validator: () => { valid: boolean, error: string | null }) {\n  data.errors = data.errors || [];\n  data.valid = data.errors.length === 0;\n\n  const value = data.value as any[];\n  if (!Array.isArray(value)) {\n    data.valid = false;\n    if (!data.errors.includes(\"invalid array\")) {\n      data.errors.push(\"invalid array\");\n    }\n    return data;\n  }\n\n  const result = validator();\n  if (!result.valid) {\n    data.valid = false;\n    data.errors.push(result.error);\n  }\n\n  return data;\n}\n\nexport const array = {\n  coerce(this: Context, data: any, msg: string = \"\") {\n    try {\n      data.value = JSON.parse(data.value);\n    } catch (e) {}\n\n    return validate(data, () => {\n      return { valid: true, error: null };\n    });\n  },\n  default(this: Context, data: any, defaultValue: any[]) {\n    if (data.value === undefined || data.value === null) {\n      data.value = defaultValue;\n    }\n\n    return validate(data, () => {\n      return { valid: true, error: null };\n    });\n  },\n  required(this: Context, data: any, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as any[];\n      const valid = value && value.length > 0;\n      return { valid, error: valid ? null : msg || \"array is required\" };\n    });\n  },\n  min(this: Context, data: any, min: number, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as any[];\n      const valid = value && value.length >= min;\n      return { valid, error: valid ? null : msg || `too short - min length ${min}` };\n    });\n  },\n  max(this: Context, data: any, max: number, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as any[];\n      const valid = value && value.length <= max;\n      return { valid, error: valid ? null : msg || `too long - max length ${max}` };\n    });\n  },\n  items(this: Context, data: any, items: any, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as any[];\n      const valid = value && value.every((v) => v === items);\n      return { valid, error: valid ? null : msg || `invalid items - expected ${items}` };\n    });\n  }\n}","import { Context } from \"./types\";\n\nfunction validate (data: any, validator: () => { valid: boolean, error: string | null }) {\n  data.errors = data.errors || [];\n  data.valid = data.errors.length === 0;\n\n  const value = data.value as any;\n  if (typeof value !== \"object\" || value === null) {\n    data.valid = false;\n    if (!data.errors.includes(\"invalid object\")) {\n      data.errors.push(\"invalid object\");\n    }\n    return data;\n  }\n\n  const result = validator();\n  if (!result.valid) {\n    data.valid = false;\n    data.errors.push(result.error);\n  }\n\n  return data;\n}\n\nexport const object = {\n  coerce(this: Context, data: any, msg: string = \"\") {\n    try {\n      data.value = JSON.parse(data.value);\n    } catch (e) {}\n\n    return validate(data, () => {\n      return { valid: true, error: null };\n    });\n  },\n  default(this: Context, data: any, defaultValue: Record<string, any>) {\n    if (data.value === undefined || data.value === null) {\n      data.value = defaultValue;\n    }\n    return validate(data, () => {\n      return { valid: true, error: null };\n    });\n  },\n  required(this: Context, data: any, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as any;\n      const valid = value && Object.keys(value).length > 0;\n      return { valid, error: valid ? null : msg || \"object is required\" };\n    });\n  },\n  props(this: Context, data: any, props: Record<string, any>, msg: string = \"\") {\n    return validate(data, () => {\n      const value = data.value as any;\n      const keys = Object.keys(props);\n      let valid = true;\n      let failedKeys: string[] = [];\n      for (const key of keys) {\n        const validator = props[key];\n        const result = validator.run({ value: value[key] });\n        if (!result.valid) {\n          valid = false;\n          data.errors.push(...result.errors.map((err: string) => `${key}: ${err}`));\n          failedKeys.push(key);\n        }\n      }\n      if (!valid) {\n        const error = msg || failedKeys.length ? `invalid props - ${failedKeys.join(\", \")}` : \"\";\n        return { valid: false, error };\n      }\n      return { valid: true, error: null };\n    });\n  }\n}","import { Fluent, fluent } from \"fluent\";\nimport { string } from \"./string\";\nimport { number } from \"./number\";\nimport { array } from \"./array\";\nimport { object } from \"./object\";\nimport type { Infer } from \"./types\";\n\nexport type Api = {\n  string: typeof string;\n  number: typeof number;\n  array: typeof array;\n  object: typeof object;\n};\n\nexport const api: Api = {\n  string,\n  number,\n  array,\n  object,\n};\n\nexport const validate = fluent({ api }) as Fluent<Api, Api, []>;\n\nexport { Infer };\n"]}