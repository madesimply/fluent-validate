{"version":3,"sources":["../src/string.ts","../src/number.ts","../src/array.ts","../src/object.ts","../src/boolean.ts","../src/context.ts","../src/index.ts"],"names":["string","data","value","defaultValue","msg","valid","values","min","max","length","pattern","number","array","items","v","_data","object","props","keys","failedKeys","key","validator","errors","result","_errors","err","boolean","validType","type","get","target","set","validate","self","initialValue","ctx","api","fluent"],"mappings":"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","file":"index.js","sourcesContent":["import { Context } from \"./types\";\n\nexport const string = {\n  coerce(this: Context, data: any) {\n    return this.validate.string(data, (value) => {\n      try {\n        const parsed = value.toString();\n        return { valid: true, error: null, value: parsed };\n      } catch (e) {\n        return { valid: false, error: \"invalid string\" };\n      }\n    });\n  },\n  default(this: Context, data: any, defaultValue: string) {\n    return this.validate.string(data, (value) => {\n      if (defaultValue === undefined || defaultValue === null) {\n        return { valid: false, error: \"invalid string\" };\n      }\n      if (value === undefined || value === null) {\n        return { valid: true, error: null, value: defaultValue };\n      }\n      return { valid: true, error: null, value };\n    });\n  },\n  required(this: Context, data: any, msg: string = \"\") {\n    return this.validate.string(data, (value) => {\n      const valid = value !== undefined && value !== null;\n      return { valid, error: valid ? null : msg || \"string is required\" };\n    });\n  },\n  enum(this: Context, data: any, values: string[], msg: string = \"\") {\n    return this.validate.string(data, (value) => {\n      const valid = values.includes(value);\n      return { valid, error: valid ? null : msg || \"invalid value\" };\n    });\n  },\n  min(this: Context, data: any, min: number, msg: string = \"\") {\n    return this.validate.string(data, (value) => {\n      const valid = !!(value && value.length >= min);\n      return {\n        valid,\n        error: valid ? null : msg || `too short - min length ${min}`,\n      };\n    });\n  },\n  max(this: Context, data: any, max: number, msg: string = \"\") {\n    return this.validate.string(data, (value) => {\n      const valid = !!(value && value.length <= max);\n      return {\n        valid,\n        error: valid ? null : msg || `too long - max length ${max}`,\n      };\n    });\n  },\n  length(this: Context, data: any, length: number, msg: string = \"\") {\n    return this.validate.string(data, (value) => {\n      const valid = !!(value && value.length === length);\n      return {\n        valid,\n        error: valid ? null : msg || `invalid length - length ${length}`,\n      };\n    });\n  },\n  match(this: Context, data: any, pattern: string, msg: string = \"\") {\n    return this.validate.string(data, (value) => {\n      const valid = new RegExp(pattern).test(value);\n      return { valid, error: valid ? null : msg || \"invalid pattern\" };\n    });\n  },\n};\n","import { Context } from \"./types\";\n\nexport const number = {\n  coerce(this: Context, data: any) {\n    return this.validate.number(data, (value) => {\n      try {\n        const parsed = Number(value);\n        return { valid: true, error: null, value: parsed };\n      } catch (e) {\n        return { valid: false, error: \"invalid number\" };\n      }\n    });\n  },\n  default(this: Context, data: any, defaultValue: number) {\n    return this.validate.number(data, (value) => {\n      if (defaultValue === undefined || defaultValue === null) {\n        return { valid: false, error: \"invalid number\" };\n      }\n      if (value === undefined || value === null) {\n        return { valid: true, error: null, value: defaultValue };\n      }\n      return { valid: true, error: null, value };\n    });\n  },\n  required(this: Context, data: any, msg: string = \"\") {\n    return this.validate.number(data, (value) => {\n      const valid = value !== undefined && value !== null;\n      return { valid, error: valid ? null : msg || \"number is required\" };\n    });\n  },\n  enum(this: Context, data: any, values: number[], msg: string = \"\") {\n    return this.validate.number(data, (value) => {\n      const valid = values.includes(value);\n      return { valid, error: valid ? null : msg || \"invalid value\" };\n    });\n  },\n  min(this: Context, data: any, min: number, msg: string = \"\") {\n    return this.validate.number(data, (value) => {\n      const valid = value >= min;\n      return {\n        valid,\n        error: valid ? null : msg || `too small - min value ${min}`,\n      };\n    });\n  },\n  max(this: Context, data: any, max: number, msg: string = \"\") {\n    return this.validate.number(data, (value) => {\n      const valid = value <= max;\n      return {\n        valid,\n        error: valid ? null : msg || `too large - max value ${max}`,\n      };\n    });\n  },\n  integer(this: Context, data: any, msg: string = \"\") {\n    return this.validate.number(data, (value) => {\n      const valid = Number.isInteger(value);\n      return { valid, error: valid ? null : msg || \"invalid integer\" };\n    });\n  },\n};\n","import { Context } from \"./types\";\n\nexport const array = {\n  coerce(this: Context, data: any) {\n    return this.validate.array(data, (value) => {\n      try {\n        const parsed = Array.isArray(value) ? value : JSON.parse(value);\n        return { valid: true, error: null, value: parsed };\n      } catch (e) {\n        return { valid: false, error: \"invalid array\" };\n      }\n    });\n  },\n  default(this: Context, data: any, defaultValue: any[]) {\n    return this.validate.array(data, (value) => {\n      if (defaultValue === undefined || defaultValue === null) {\n        return { valid: false, error: \"invalid array\" };\n      }\n      if (value === undefined || value === null) {\n        return { valid: true, error: null, value: defaultValue };\n      }\n      return { valid: true, error: null, value };\n    });\n  },\n  required(this: Context, data: any, msg: string = \"\") {\n    return this.validate.array(data, (value) => {\n      const valid = value !== undefined && value !== null;\n      return { valid, error: valid ? null : msg || \"array is required\" };\n    });\n  },\n  min(this: Context, data: any, min: number, msg: string = \"\") {\n    return this.validate.array(data, (value) => {\n      const valid = value && value.length >= min;\n      return {\n        valid,\n        error: valid ? null : msg || `too short - min length ${min}`,\n      };\n    });\n  },\n  max(this: Context, data: any, max: number, msg: string = \"\") {\n    return this.validate.array(data, (value) => {\n      const valid = value && value.length <= max;\n      return {\n        valid,\n        error: valid ? null : msg || `too long - max length ${max}`,\n      };\n    });\n  },\n  items(this: Context, data: any, items: any, msg: string = \"\") {\n    return this.validate.array(data, (value) => {\n      const valid =\n        value &&\n        value.every((v: any) => {\n          const _data = {};\n          this.validate.set(\"value\", _data, v);\n\n          return items.run(_data).valid;\n        });\n      return {\n        valid,\n        error: valid\n          ? null\n          : msg ||\n            `invalid items - expected ${items.chain[0].method.split(\".\")[0]}`,\n      };\n    });\n  },\n};\n","import { Context } from \"./types\";\n\nexport const object = {\n  coerce(this: Context, data: any) {\n    return this.validate.object(data, (value) => {\n      try {\n        const parsed = JSON.parse(value);\n        return { valid: true, error: null, value: parsed };\n      } catch (e) {\n        return { valid: false, error: \"invalid object\" };\n      }\n    });\n  },\n  default(this: Context, data: any, defaultValue: Record<string, any>) {\n    return this.validate.object(data, (value) => {\n      if (defaultValue === undefined || defaultValue === null) {\n        return { valid: false, error: \"invalid object\" };\n      }\n      if (value === undefined || value === null) {\n        return { valid: true, error: null, value: defaultValue };\n      }\n      return { valid: true, error: null, value };\n    });\n  },\n  required(this: Context, data: any, msg: string = \"\") {\n    return this.validate.object(data, (value) => {\n      const valid = value !== undefined && value !== null;\n      return { valid, error: valid ? null : msg || \"object is required\" };\n    });\n  },\n  props(\n    this: Context,\n    data: any,\n    props: Record<string, any>,\n    msg: string = \"\"\n  ) {\n    return this.validate.object(data, (value) => {\n      const keys = Object.keys(props);\n      let valid = true;\n      let failedKeys: string[] = [];\n\n      for (const key of keys) {\n        const validator = props[key];\n        const _data = {};\n        const errors = this.validate.get(\"errors\", _data, []);\n        this.validate.set(\"value\", _data, value[key]);\n\n        const result = validator.run(_data);\n        if (!result.valid) {\n          valid = false;\n          const _errors = this.validate.get(\"errors\", result, []);\n          errors.push(..._errors.map((err: string) => `${key}: ${err}`));\n          failedKeys.push(key);\n        }\n      }\n      if (!valid) {\n        const error =\n          msg || failedKeys.length\n            ? `invalid props - ${failedKeys.join(\", \")}`\n            : \"\";\n        return { valid: false, error };\n      }\n      return { valid: true, error: null };\n    });\n  },\n};\n","import { Context } from \"./types\";\n\nexport const boolean = {\n  coerce(this: Context, data: any) {\n    return this.validate.boolean(data, (value) => {\n      try {\n        const parsed = Boolean(value);\n        return { valid: true, error: null, value: parsed };\n      } catch (e) {\n        return { valid: false, error: \"invalid boolean\" };\n      }\n    });\n  },\n  default(this: Context, data: any, defaultValue: boolean) {\n    return this.validate.boolean(data, (value) => {\n      if (defaultValue === undefined || defaultValue === null) {\n        return { valid: false, error: \"invalid boolean\" };\n      }\n      if (value === undefined || value === null) {\n        return { valid: true, error: null, value: defaultValue };\n      }\n      return { valid: true, error: null, value };\n    });\n  },\n  required(this: Context, data: any, msg: string = \"\") {\n    return this.validate.boolean(data, (value) => {\n      const valid = value !== undefined && value !== null;\n      return { valid, error: valid ? null : msg || \"boolean is required\" };\n    });\n  },\n};\n","import { Context, Validator } from \"./types\";\n\nconst validType = (value: any, type: string) => {\n  switch (type) {\n    case \"string\":\n      return typeof value === \"string\";\n    case \"number\":\n      return typeof value === \"number\";\n    case \"boolean\":\n      return typeof value === \"boolean\";\n    case \"array\":\n      return Array.isArray(value);\n    case \"object\":\n      return typeof value === \"object\";\n    default:\n      return false;\n  }\n};\n\nfunction get(\n  target: \"value\" | \"valid\" | \"errors\",\n  data: any,\n  defaultValue?: any\n) {\n  data[target] = data[target] || defaultValue;\n  return data[target];\n}\n\nfunction set(target: \"value\" | \"valid\" | \"errors\", data: any, value: any) {\n  data[target] = value;\n  return data;\n}\n\nfunction validate(\n  self: Context,\n  type: string,\n  data: any,\n  validator: Validator\n) {\n  if (!self.validate) throw new Error(\"validate is not defined in context\");\n\n  const errors = self.validate.get(\"errors\", data, []);\n  self.validate.set(\"errors\", data, errors);\n  self.validate.set(\"valid\", data, errors.length === 0);\n\n  const initialValue = self.validate.get(\"value\", data);\n  const result = validator(initialValue);\n  const value = result.value || initialValue;\n\n  if (!validType(value, type)) {\n    self.validate.set(\"valid\", data, false);\n    if (!errors.includes(`invalid ${type}`)) {\n      errors.push(`invalid ${type}`);\n      self.validate.set(\"errors\", data, errors);\n    }\n    return data;\n  }\n\n  if (!result.valid) {\n    self.validate.set(\"valid\", data, false);\n    errors.push(result.error);\n    self.validate.set(\"errors\", data, errors);\n  } else {\n    if (result.value !== undefined && validType(result.value, type)) {\n      self.validate.set(\"value\", data, result.value);\n    }\n  }\n\n  return data;\n}\n\nexport const ctx: Context = {\n  validate: {\n    set,\n    get,\n    string: (data: any, validator: Validator) =>\n      validate(ctx, \"string\", data, validator),\n    number: (data: any, validator: Validator) =>\n      validate(ctx, \"number\", data, validator),\n    boolean: (data: any, validator: Validator) =>\n      validate(ctx, \"boolean\", data, validator),\n    object: (data: any, validator: Validator) =>\n      validate(ctx, \"object\", data, validator),\n    array: (data: any, validator: Validator) =>\n      validate(ctx, \"array\", data, validator),\n  },\n};\n","import { Fluent, fluent } from \"fluent\";\nimport { string } from \"./string\";\nimport { number } from \"./number\";\nimport { array } from \"./array\";\nimport { object } from \"./object\";\nimport { boolean } from \"./boolean\";\nimport { ctx } from \"./context\";\nimport type { Context, Infer } from \"./types\";\n\nexport type Api = {\n  string: typeof string;\n  number: typeof number;\n  array: typeof array;\n  object: typeof object;\n  boolean: typeof boolean;\n};\n\nexport const api: Api = {\n  string,\n  number,\n  array,\n  object,\n  boolean,\n};\n\nexport const validator = fluent({ api, ctx }) as Fluent<Api, Api, []>;\n\nexport { Infer, Context, ctx };\n"]}